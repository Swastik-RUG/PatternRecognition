clear;
close all;
rng(100)
id = "S4035593";
% Read the input data as a matrix
data_a = load('data_lvq_A(1).mat');
data_b = load('data_lvq_B(1).mat');
data_a_mat = cell2mat(struct2cell(data_a));
data_b_mat = cell2mat(struct2cell(data_b));

% Determine the prototypes for the respective data at random
prototype1 = mean(data_a_mat) + randn(size(mean(data_a_mat)));
prototype2 = mean(data_a_mat) + randn(size(mean(data_a_mat)));
prototype3 = mean(data_b_mat) + randn(size(mean(data_b_mat)));
prototypes = [prototype1 0; prototype2 0; prototype3 1];
%##########################################################################
% TRAIN AND PLOT
% * Plot the cluster with prototypes after training
% * Plot the training error curve
% * Plot the relevances
%##########################################################################
% Combine the Class A and Class B data
data = [data_a_mat; data_b_mat];
% Create the class labels for the Class A and Class B data
class_labels = [zeros(size(data_a_mat,1),1); ones(size(data_b_mat,1),1)];
% Perform relevance Learning vector quantization on the entire data
[prototypeList, error_rate_by_epochs, relevances, prediction_list] = relevanceLVQ(data, prototypes, class_labels,0.01);

% Plot the cluster with prototypes after training
figure 
scatter(data_a_mat(:,1),data_a_mat(:,2),'b','filled');
hold on
scatter(data_b_mat(:,1),data_b_mat(:,2),'g','filled');
hold on
for p=1:size(prototypeList,1)
    plot(prototypeList(p,1), prototypeList(p,2), "*",'MarkerSize',16);
    hold on
end
title(["Scatter plot with prototypes ["+id+"]"])
legend("Dataset B","Dataset A","Prototype-C1-A", "Prototype-C1-B", "Prototype-C2-A", "Prototype-C2-B");
hold off

% Plot the Training error curve and Relevances
figure
subplot(1,2,1)
plot(relevances(1,:));
hold on
plot(relevances(2,:));
legend("relevance1", "relevance2")
title(["Value of relevances ["+id+"]"])
xlabel('Epochs');
ylabel('Relevance');

subplot(1,2,2)
plot(error_rate_by_epochs);
legend('Error')
title(["Training error curve ["+id+"]"])
xlabel('Epochs');
ylabel('Misclassification');
hold on

%##########################################################################
% START LOOCV
%##########################################################################
% Create samples of training and testing data for LOOCV.
[training_a, testing_a ]= training_testing_data_split(data_a_mat, 0.9, 10);
[training_b, testing_b ]= training_testing_data_split(data_b_mat, 0.9, 10);

% List to store the classification errors that occurr during LOOCV
classification_error_list = [];
error_rates = [];
relevance_list = [];
for i=1:10
    % Find the size of the datasets
    size_training_a = size(cell2mat(training_a(i)),1);
    size_training_b = size(cell2mat(training_b(i)),1);
    size_testing_a = size(cell2mat(testing_a(i)),1);
    size_testing_b = size(cell2mat(testing_b(i)),1);
    
    % Combine the training and testing set of class A and class B at index 'i'
    % This is the data that was generated by training_testing_data_split
    % for LOOCV.
    train_set = [cell2mat(training_a(i)); cell2mat(training_b(i))];
    test_set = [cell2mat(testing_a(i)); cell2mat(testing_b(i))];
    
    % Set the class labels for Class A and Class B training and testing
    % sets generated
    training_class_labels = [zeros(size_training_a,1); ones(size_training_b,1)];
    testing_class_labels = [zeros(size_testing_a,1); ones(size_testing_b,1)];
    
    % Run the LVQ algorithm to train the model and retrive the new trained prototypes
    [prototype_list, error_rate_by_epochs, relevances, ~] = relevanceLVQ(train_set,prototypes, training_class_labels, 0.01);
    prototypes = prototype_list;
    
    % Using the trained prototypes predict the labels for the testing data
    [~,~,~,predicted_labels] = relevanceLVQ(test_set,prototypes, [], 0.0);
    
    % Check if the predicted labels match with the expected testing labels
    % Determine the classification error based on the missmatches and store
    % the result in classification_error_list.
    matching_class_labels = find(testing_class_labels == predicted_labels);
    classification_error = 1-size(matching_class_labels,1)/size(test_set,1);
    classification_error_list = [classification_error_list;classification_error];
    error_rates = error_rate_by_epochs;
    relevance_list = relevances;
end

mean_classification_error = mean(classification_error_list);
% Plot the classification errors for the 10-CV and display the mean
% classification error
figure
bar(classification_error_list);
text(1,0.5,sprintf('mean classification error value is = %f', mean_classification_error),'Color','red','FontSize',14)
hold on
xlabel("cross-validation fold");
ylabel("classification error on test sets");
title(["classification error for LOOCV ["+id+"]"]);
plot(xlim,[mean_classification_error mean_classification_error], 'r')
ylim([0 1])


% Splits the data into n random training and testing data at the ratio p
function [training, testing] = training_testing_data_split(data, p, n)
training = {};
testing = {};
    for i=1:n
        [m,~] = size(data) ;
        idx = randperm(m)  ;
        training = [training; data(idx(1:round(p*m)),:)] ; 
        testing = [testing; data(idx(round(p*m)+1:end),:)] ;
    end
end